name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CI: true
  GITHUB_ACTIONS: true

jobs:
  # Code quality checks - only need to run once
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1

      - name: Run clippy (default features)
        run: cargo clippy -- -D warnings

      - name: Run clippy (minimal features)
        run: cargo clippy --no-default-features --features "json csv additional_mysql_types" -- -D warnings

  # Test TLS functionality (always available)
  test-tls:
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Test TLS configuration unit tests
        run: cargo nextest run --test tls_config_unit_tests

      - name: Test TLS CLI flag validation
        run: |
          # Test mutually exclusive TLS flags
          cargo build --release

          # Test that mutually exclusive flags are rejected
          echo "Testing mutually exclusive TLS flags..."

          # Set up binary path with Windows .exe suffix detection
          BIN="./target/release/gold_digger"
          if [ -f "${BIN}.exe" ]; then
            BIN="${BIN}.exe"
          fi

          # These should fail with configuration errors
          ! "$BIN" --tls-ca-file /tmp/nonexistent.pem --insecure-skip-hostname-verify \
            --db-url "mysql://test" --query "SELECT 1" --output /tmp/test.json 2>/dev/null || exit 1
          ! "$BIN" --tls-ca-file /tmp/nonexistent.pem --allow-invalid-certificate \
            --db-url "mysql://test" --query "SELECT 1" --output /tmp/test.json 2>/dev/null || exit 1
          ! "$BIN" --insecure-skip-hostname-verify --allow-invalid-certificate \
            --db-url "mysql://test" --query "SELECT 1" --output /tmp/test.json 2>/dev/null || exit 1

          echo "TLS flag validation tests passed"

      - name: Verify TLS always available
        run: |
          # Build the binary first
          cargo build --release

          # Set up binary path with Windows .exe suffix detection
          BIN="./target/release/gold_digger"
          if [ -f "${BIN}.exe" ]; then
            BIN="${BIN}.exe"
          fi

          # Test that TLS flags are always available in CLI help
          "$BIN" --help | grep -E "(tls-ca-file|insecure-skip-hostname-verify|allow-invalid-certificate)" \
            || exit 1

          # Verify rustls dependencies are present
          cargo tree | grep -E "(rustls|rustls-native-certs)" || exit 1

          # Verify no native-tls dependencies (rustls-only implementation)
          ! cargo tree | grep "native-tls" || exit 1

          echo "TLS always available test passed"

  # Test with different feature combinations (TLS always available)
  test-features:
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        features:
          - "default"
          - "minimal"
    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run tests (default features)
        if: matrix.features == 'default'
        run: cargo nextest run

      - name: Run tests (minimal features)
        if: matrix.features == 'minimal'
        run: cargo nextest run --no-default-features --features "json csv additional_mysql_types verbose"

      - name: Build release
        run: |
          if [ "${{ matrix.features }}" = "default" ]; then
            cargo build --release
          else
            cargo build --release --no-default-features --features "json csv additional_mysql_types verbose"
          fi

  # Test cross-platform TLS functionality (always available)
  test-cross-platform:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: "Linux"
          - os: macos-latest
            platform: "macOS"
          - os: windows-latest
            platform: "Windows"
    runs-on: ${{ matrix.os }}
    needs: quality
    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      # Run TLS configuration unit tests and build the release binary
      - run: cargo nextest run --test tls_config_unit_tests
      - run: cargo nextest run --test tls_integration
      - run: cargo build --release

      # Verify platform certificate store integration
      - run: cargo tree | grep -E "(rustls|rustls-native-certs)" || exit 1

      - name: Verify platform certificate store integration
        run: cargo tree | grep -E "(rustls|rustls-native-certs)" || exit 1

  # Test TLS error handling and configuration validation
  test-tls-validation:
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      # Build the release binary and run the TLS integration and error handling tests
      - run: cargo build --release
      - run: cargo nextest run --test tls_integration tls_error_handling_tests

      - name: Test TLS configuration validation
        run: |
          echo "Testing TLS configuration validation..."

          # Set up binary path with Windows .exe suffix detection
          BIN="./target/release/gold_digger"
          if [ -f "${BIN}.exe" ]; then
            BIN="${BIN}.exe"
          fi

          # Test invalid CA file path
          ! "$BIN" --tls-ca-file /nonexistent/path.pem --db-url "mysql://test" \
            --query "SELECT 1" --output /tmp/test.json 2>/dev/null || exit 1

          # Test invalid certificate content
          echo "invalid certificate" > /tmp/invalid-cert.pem
          ! "$BIN" --tls-ca-file /tmp/invalid-cert.pem --db-url "mysql://test" \
            --query "SELECT 1" --output /tmp/test.json 2>/dev/null || exit 1

          echo "TLS configuration validation tests passed"

  # Generate coverage for TLS-enabled builds
  coverage:
    runs-on: ubuntu-latest
    needs: [test-tls, test-features, test-cross-platform, test-tls-validation]
    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Generate coverage (default features with TLS)
        run: cargo llvm-cov --workspace --lcov --output-path lcov-default.info

      - name: Generate coverage (minimal features with TLS)
        run: |
          cargo llvm-cov --workspace --lcov --output-path lcov-minimal.info \
            --no-default-features --features "json csv additional_mysql_types"

      - name: Combine coverage reports
        run: |
          # Combine both coverage reports
          cat lcov-default.info lcov-minimal.info > lcov.info

      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: EvilBit-Labs/gold_digger
