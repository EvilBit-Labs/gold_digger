name: Cross-Platform Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read
  id-token: write

jobs:
  cross-platform:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        tls: [native-tls, rustls, none]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    concurrency:
      group: cross-platform-${{ github.ref }}-${{ matrix.os }}-${{ matrix.tls }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Rust Environment
        uses: ./.github/actions/setup-rust
        with:
          components: "clippy,rustfmt"
          install-cargo-audit: "true"
          install-nextest: "true"

      - name: Install just
        uses: extractions/setup-just@v3

      # Build dependencies first to avoid compilation issues during testing
      - name: Build project dependencies
        uses: ./.github/actions/build-dependencies
        with:
          features: "${{ matrix.tls }}"

      - name: Tests (nextest)
        uses: ./.github/actions/run-tests
        with:
          features: "${{ matrix.tls }}"
          use-nextest: "true"

      # Build time comparison metrics collection
      - name: Build time comparison
        shell: bash
        run: |
          echo "⏱️ Collecting build time metrics for ${{ matrix.tls }} on ${{ matrix.os }}"

          # Clean previous builds
          cargo clean

          # Time the build
          start_time=$(date +%s)
          case "${{ matrix.tls }}" in
            "native-tls")
              echo "Building with native-tls..."
              cargo build --release --no-default-features --features "json csv ssl additional_mysql_types verbose"
              ;;
            "rustls")
              echo "Building with rustls..."
              cargo build --release --no-default-features --features "json csv ssl-rustls additional_mysql_types verbose"
              ;;
            "none")
              echo "Building without TLS..."
              cargo build --release --no-default-features --features "json csv additional_mysql_types verbose"
              ;;
          esac
          end_time=$(date +%s)

          build_time=$((end_time - start_time))
          echo "🏁 Build completed in ${build_time} seconds"

          # Get binary size
          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            binary_path="target/release/gold_digger.exe"
          else
            binary_path="target/release/gold_digger"
          fi

          if [[ -f "$binary_path" ]]; then
            binary_size=$(stat -c%s "$binary_path" 2>/dev/null || stat -f%z "$binary_path" 2>/dev/null || echo "unknown")
            echo "📦 Binary size: ${binary_size} bytes"
          else
            echo "⚠️ Binary not found at expected path: $binary_path"
          fi

          # Create metrics summary
          echo "📊 Build Metrics Summary:"
          echo "  OS: ${{ matrix.os }}"
          echo "  TLS: ${{ matrix.tls }}"
          echo "  Build Time: ${build_time}s"
          echo "  Binary Size: ${binary_size} bytes"

          # Save metrics to file for potential artifact upload
          mkdir -p build-metrics
          cat > "build-metrics/metrics-${{ matrix.os }}-${{ matrix.tls }}.txt" << EOF
          os=${{ matrix.os }}
          tls=${{ matrix.tls }}
          build_time=${build_time}
          binary_size=${binary_size}
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF

      - name: Upload build metrics
        uses: actions/upload-artifact@v4
        with:
          name: build-metrics-${{ matrix.os }}-${{ matrix.tls }}
          path: build-metrics/
          retention-days: 30

      # Coverage - only run on Ubuntu with native-tls to avoid redundancy
      - name: Install cargo-llvm-cov
        if: matrix.os == 'ubuntu-22.04' && matrix.tls == 'native-tls'
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Coverage (llvm-cov)
        if: matrix.os == 'ubuntu-22.04' && matrix.tls == 'native-tls'
        shell: bash
        run: |
          echo "📊 Running coverage with native-tls configuration..."
          cargo llvm-cov --workspace --lcov --output-path lcov.info --no-default-features --features "json csv ssl additional_mysql_types verbose"

      - name: Upload coverage artifact
        if: matrix.os == 'ubuntu-22.04' && matrix.tls == 'native-tls'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: lcov.info

      - name: Upload to Codecov
        if: matrix.os == 'ubuntu-22.04' && matrix.tls == 'native-tls' && github.repository == 'UncleSp1d3r/gold_digger'
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          flags: unit
          fail_ci_if_error: false
          verbose: true
