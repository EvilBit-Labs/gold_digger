name: "Enhanced Error Reporter"
description: "Provides structured error reporting with actionable remediation steps and debug artifacts collection"

inputs:
  failure-category:
    description: "Category of failure (build, test, security, format, dependency)"
    required: true
  error-context:
    description: "Additional context about the error"
    required: false
    default: ""
  collect-artifacts:
    description: "Whether to collect debug artifacts"
    required: false
    default: "true"
  troubleshooting-guide:
    description: "Link to specific troubleshooting guide"
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Categorize and Report Error
      shell: bash
      run: |
        set -euo pipefail

        # Color codes for better visibility
        RED='\033[0;31m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        GREEN='\033[0;32m'
        NC='\033[0m' # No Color

        CATEGORY="${{ inputs.failure-category }}"
        CONTEXT="${{ inputs.error-context }}"
        COLLECT_ARTIFACTS="${{ inputs.collect-artifacts }}"
        GUIDE_URL="${{ inputs.troubleshooting-guide }}"

        echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${RED}❌ CI FAILURE DETECTED${NC}"
        echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""

        # Get failure category details
        case "$CATEGORY" in
          "build")
            echo -e "${YELLOW}🔨 BUILD FAILURE${NC}"
            echo "Category: Compilation or build process error"
            echo ""
            echo -e "${BLUE}📋 Common Causes:${NC}"
            echo "  • Rust compilation errors (syntax, type errors)"
            echo "  • Missing dependencies or features"
            echo "  • Platform-specific build issues"
            echo "  • Cargo.toml configuration problems"
            echo ""
            echo -e "${GREEN}🔧 Immediate Actions:${NC}"
            echo "  1. Check Rust compiler error messages above"
            echo "  2. Verify feature flags match your requirements"
            echo "  3. Run 'cargo check' locally to reproduce"
            echo "  4. Check platform-specific dependencies (OpenSSL on Windows)"
            echo ""
            echo -e "${GREEN}💡 Quick Fixes:${NC}"
            echo "  • cargo clean && cargo build --release"
            echo "  • just validate-deps  # Check TLS dependencies"
            echo "  • just build-all      # Test all feature combinations"
            ;;

          "test")
            echo -e "${YELLOW}🧪 TEST FAILURE${NC}"
            echo "Category: Unit tests, integration tests, or test execution error"
            echo ""
            echo -e "${BLUE}📋 Common Causes:${NC}"
            echo "  • Test logic errors or assertion failures"
            echo "  • Database connection issues in tests"
            echo "  • Platform-specific test behavior"
            echo "  • Test environment setup problems"
            echo ""
            echo -e "${GREEN}🔧 Immediate Actions:${NC}"
            echo "  1. Review test failure output above for specific assertions"
            echo "  2. Check if failure is platform-specific"
            echo "  3. Run 'just test' locally to reproduce"
            echo "  4. Verify test database setup if using integration tests"
            echo ""
            echo -e "${GREEN}💡 Quick Fixes:${NC}"
            echo "  • cargo test -- --nocapture  # Show test output"
            echo "  • just test-nextest          # Use nextest for better output"
            echo "  • RUST_BACKTRACE=1 cargo test  # Get full stack traces"
            ;;

          "security")
            echo -e "${YELLOW}🔒 SECURITY FAILURE${NC}"
            echo "Category: Security scanning, vulnerability detection, or audit failure"
            echo ""
            echo -e "${BLUE}📋 Common Causes:${NC}"
            echo "  • High/critical vulnerabilities in dependencies"
            echo "  • License compliance violations"
            echo "  • Security policy violations (cargo-deny)"
            echo "  • SARIF upload or CodeQL analysis issues"
            echo ""
            echo -e "${GREEN}🔧 Immediate Actions:${NC}"
            echo "  1. Review security scan output above for specific vulnerabilities"
            echo "  2. Check if vulnerabilities have available patches"
            echo "  3. Run 'just security' locally to reproduce"
            echo "  4. Review dependency tree for problematic packages"
            echo ""
            echo -e "${GREEN}💡 Quick Fixes:${NC}"
            echo "  • cargo update                    # Update to latest patch versions"
            echo "  • just audit                      # Run cargo-audit for advisories"
            echo "  • cargo tree | grep <vuln-crate>  # Find dependency path"
            echo "  • Edit Cargo.toml to exclude vulnerable versions"
            ;;

          "format")
            echo -e "${YELLOW}📝 FORMAT/LINT FAILURE${NC}"
            echo "Category: Code formatting, linting, or style violations"
            echo ""
            echo -e "${BLUE}📋 Common Causes:${NC}"
            echo "  • Code not formatted with rustfmt"
            echo "  • Clippy warnings (zero-tolerance policy)"
            echo "  • Pre-commit hook violations"
            echo "  • Import organization or style issues"
            echo ""
            echo -e "${GREEN}🔧 Immediate Actions:${NC}"
            echo "  1. Review formatting/linting output above"
            echo "  2. Run format and lint checks locally"
            echo "  3. Apply automatic fixes where possible"
            echo "  4. Address remaining manual fixes"
            echo ""
            echo -e "${GREEN}💡 Quick Fixes:${NC}"
            echo "  • just format        # Auto-format code"
            echo "  • just fix           # Auto-fix clippy issues"
            echo "  • just fmt-check     # Verify formatting"
            echo "  • just lint          # Check for remaining issues"
            ;;

          "dependency")
            echo -e "${YELLOW}📦 DEPENDENCY FAILURE${NC}"
            echo "Category: Dependency resolution, feature conflicts, or version issues"
            echo ""
            echo -e "${BLUE}📋 Common Causes:${NC}"
            echo "  • Conflicting dependency versions"
            echo "  • Feature flag conflicts (TLS backends)"
            echo "  • Missing optional dependencies"
            echo "  • Platform-specific dependency issues"
            echo ""
            echo -e "${GREEN}🔧 Immediate Actions:${NC}"
            echo "  1. Review dependency error messages above"
            echo "  2. Check for feature flag conflicts"
            echo "  3. Validate dependency tree structure"
            echo "  4. Test different feature combinations"
            echo ""
            echo -e "${GREEN}💡 Quick Fixes:${NC}"
            echo "  • just validate-deps  # Check TLS dependency conflicts"
            echo "  • cargo tree          # Inspect dependency tree"
            echo "  • cargo update        # Update to compatible versions"
            echo "  • just build-all      # Test all feature combinations"
            ;;

          *)
            echo -e "${YELLOW}❓ UNKNOWN FAILURE${NC}"
            echo "Category: Unspecified or general failure"
            echo ""
            echo -e "${BLUE}📋 General Troubleshooting:${NC}"
            echo "  • Check the error output above for specific details"
            echo "  • Look for patterns in the failure messages"
            echo "  • Try reproducing the issue locally"
            echo ""
            echo -e "${GREEN}🔧 General Actions:${NC}"
            echo "  1. Run 'just ci-check' locally to reproduce CI environment"
            echo "  2. Check recent changes that might have caused the issue"
            echo "  3. Review workflow logs for additional context"
            ;;
        esac

        # Add context if provided
        if [[ -n "$CONTEXT" ]]; then
          echo ""
          echo -e "${BLUE}📄 Additional Context:${NC}"
          echo "$CONTEXT"
        fi

        # Add troubleshooting guide link if provided
        if [[ -n "$GUIDE_URL" ]]; then
          echo ""
          echo -e "${BLUE}📚 Detailed Troubleshooting Guide:${NC}"
          echo "$GUIDE_URL"
        fi

        # Environment information
        echo ""
        echo -e "${BLUE}🖥️  Environment Information:${NC}"
        echo "  OS: ${{ runner.os }}"
        echo "  Architecture: ${{ runner.arch }}"
        echo "  Workflow: ${{ github.workflow }}"
        echo "  Job: ${{ github.job }}"
        echo "  Run ID: ${{ github.run_id }}"
        echo "  Run Number: ${{ github.run_number }}"
        echo "  Event: ${{ github.event_name }}"
        echo "  Ref: ${{ github.ref }}"
        echo "  SHA: ${{ github.sha }}"

        # Rust environment if available
        if command -v rustc >/dev/null 2>&1; then
          echo "  Rust Version: $(rustc --version)"
        fi
        if command -v cargo >/dev/null 2>&1; then
          echo "  Cargo Version: $(cargo --version)"
        fi

        echo ""
        echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

    - name: Collect Debug Artifacts
      if: inputs.collect-artifacts == 'true'
      shell: bash
      run: |
        set -euo pipefail

        echo "🔍 Collecting debug artifacts..."

        # Create debug artifacts directory
        mkdir -p debug-artifacts

        # Collect system information
        echo "📊 Collecting system information..."
        {
          echo "=== System Information ==="
          echo "Date: $(date -u)"
          echo "OS: ${{ runner.os }}"
          echo "Architecture: ${{ runner.arch }}"
          echo "Hostname: $(hostname)"
          echo "User: $(whoami)"
          echo "Working Directory: $(pwd)"
          echo ""

          echo "=== Environment Variables ==="
          # Only show non-sensitive environment variables
          env | grep -E '^(CARGO_|RUST_|CI|GITHUB_|RUNNER_)' | grep -v -E '(TOKEN|SECRET|KEY|PASSWORD)' | sort
          echo ""

          echo "=== Disk Space ==="
          df -h || echo "df command not available"
          echo ""

          echo "=== Memory Usage ==="
          free -h 2>/dev/null || vm_stat 2>/dev/null || echo "Memory info not available"
          echo ""

          echo "=== Process List ==="
          ps aux | head -20 || echo "ps command not available"

        } > debug-artifacts/system-info.txt

        # Collect Rust-specific information
        echo "🦀 Collecting Rust environment information..."
        {
          echo "=== Rust Toolchain Information ==="
          rustc --version 2>/dev/null || echo "rustc not available"
          cargo --version 2>/dev/null || echo "cargo not available"
          echo ""

          echo "=== Rust Toolchain Components ==="
          rustup show 2>/dev/null || echo "rustup not available"
          echo ""

          echo "=== Cargo Configuration ==="
          if [[ -f "Cargo.toml" ]]; then
            echo "--- Cargo.toml ---"
            cat Cargo.toml
          fi
          echo ""

          if [[ -f "Cargo.lock" ]]; then
            echo "--- Cargo.lock (first 50 lines) ---"
            head -50 Cargo.lock
          fi
          echo ""

          echo "=== Dependency Tree ==="
          cargo tree --depth 2 2>/dev/null || echo "cargo tree failed or not available"

        } > debug-artifacts/rust-info.txt

        # Collect build artifacts and logs
        echo "🔨 Collecting build information..."
        {
          echo "=== Build Target Directory ==="
          if [[ -d "target" ]]; then
            find target -name "*.rlib" -o -name "*.so" -o -name "*.dylib" -o -name "*.dll" -o -name "gold_digger*" | head -20
          else
            echo "No target directory found"
          fi
          echo ""

          echo "=== Recent Build Logs ==="
          # Look for recent build logs in common locations
          find . -name "*.log" -mtime -1 2>/dev/null | head -10 | while read -r logfile; do
            echo "--- $logfile ---"
            tail -50 "$logfile" 2>/dev/null || echo "Could not read $logfile"
            echo ""
          done

        } > debug-artifacts/build-info.txt

        # Collect test artifacts if they exist
        echo "🧪 Collecting test information..."
        {
          echo "=== Test Results ==="
          if [[ -d "target/nextest" ]]; then
            echo "Nextest results found:"
            find target/nextest -name "*.xml" -o -name "*.json" | head -5
          fi
          echo ""

          if [[ -f "lcov.info" ]]; then
            echo "Coverage file found: lcov.info"
            wc -l lcov.info
          fi
          echo ""

          echo "=== Test Binary Information ==="
          find target -name "*test*" -type f -executable 2>/dev/null | head -10

        } > debug-artifacts/test-info.txt

        # Collect security scan results if they exist
        echo "🔒 Collecting security information..."
        {
          echo "=== Security Scan Results ==="

          if [[ -f "sbom.cdx.json" ]]; then
            echo "SBOM found: sbom.cdx.json"
            jq '.components | length' sbom.cdx.json 2>/dev/null || echo "Could not parse SBOM"
          fi
          echo ""

          # Look for SARIF files
          find . -name "*.sarif" -mtime -1 2>/dev/null | while read -r sarif; do
            echo "--- SARIF: $sarif ---"
            jq '.runs[0].results | length' "$sarif" 2>/dev/null || echo "Could not parse SARIF"
          done
          echo ""

          echo "=== Audit Information ==="
          cargo audit --version 2>/dev/null || echo "cargo-audit not available"

        } > debug-artifacts/security-info.txt

        # Collect workflow-specific information
        echo "⚙️ Collecting workflow information..."
        {
          echo "=== GitHub Actions Context ==="
          echo "Workflow: ${{ github.workflow }}"
          echo "Job: ${{ github.job }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo ""

          echo "=== Workflow Files ==="
          if [[ -d ".github/workflows" ]]; then
            ls -la .github/workflows/
          fi
          echo ""

          echo "=== Action Files ==="
          if [[ -d ".github/actions" ]]; then
            find .github/actions -name "*.yml" -o -name "*.yaml" | head -10
          fi

        } > debug-artifacts/workflow-info.txt

        # Create a summary file
        echo "📋 Creating debug summary..."
        {
          echo "=== Debug Artifacts Collection Summary ==="
          echo "Collection Time: $(date -u)"
          echo "Failure Category: ${{ inputs.failure-category }}"
          echo "Context: ${{ inputs.error-context }}"
          echo ""

          echo "=== Collected Files ==="
          ls -la debug-artifacts/
          echo ""

          echo "=== File Sizes ==="
          du -h debug-artifacts/*

        } > debug-artifacts/summary.txt

        echo "✅ Debug artifacts collected in debug-artifacts/"

    - name: Upload Debug Artifacts
      if: inputs.collect-artifacts == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: debug-artifacts-${{ github.job }}-${{ github.run_number }}
        path: debug-artifacts/
        retention-days: 7

    - name: Generate Troubleshooting Summary
      shell: bash
      run: |
        set -euo pipefail

        echo ""
        echo "🔗 Quick Links for Troubleshooting:"
        echo ""
        echo "📚 Documentation:"
        echo "  • Project README: https://github.com/${{ github.repository }}/blob/main/README.md"
        echo "  • Contributing Guide: https://github.com/${{ github.repository }}/blob/main/CONTRIBUTING.md"
        echo "  • Troubleshooting Docs: https://github.com/${{ github.repository }}/blob/main/docs/src/troubleshooting/README.md"
        echo ""
        echo "🔧 Local Reproduction:"
        echo "  • Run 'just ci-check' to reproduce CI locally"
        echo "  • Use 'just act-ci-dry' for GitHub Actions simulation"
        echo "  • Check 'just help' for all available commands"
        echo ""
        echo "🐛 Debugging Resources:"
        echo "  • Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "  • Debug Artifacts: Available in this workflow run"
        echo "  • Recent Commits: https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}"
        echo ""
        echo "💬 Getting Help:"
        echo "  • Create Issue: https://github.com/${{ github.repository }}/issues/new"
        echo "  • Check Existing Issues: https://github.com/${{ github.repository }}/issues"
        echo "  • Review Recent PRs: https://github.com/${{ github.repository }}/pulls"
        echo ""

        # Category-specific resources
        case "${{ inputs.failure-category }}" in
          "build")
            echo "🔨 Build-Specific Resources:"
            echo "  • Rust Build Troubleshooting: https://doc.rust-lang.org/cargo/guide/troubleshooting.html"
            echo "  • Feature Flag Documentation: Check Cargo.toml [features] section"
            echo "  • Platform Issues: https://forge.rust-lang.org/infra/platform-support.html"
            ;;
          "test")
            echo "🧪 Test-Specific Resources:"
            echo "  • Rust Testing Guide: https://doc.rust-lang.org/book/ch11-00-testing.html"
            echo "  • Nextest Documentation: https://nexte.st/"
            echo "  • Test Organization: Check tests/ directory structure"
            ;;
          "security")
            echo "🔒 Security-Specific Resources:"
            echo "  • RustSec Advisory Database: https://rustsec.org/"
            echo "  • Cargo Audit Documentation: https://github.com/RustSec/rustsec/tree/main/cargo-audit"
            echo "  • Dependency Security: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html"
            ;;
          "format")
            echo "📝 Format-Specific Resources:"
            echo "  • Rustfmt Configuration: https://rust-lang.github.io/rustfmt/"
            echo "  • Clippy Lints: https://rust-lang.github.io/rust-clippy/master/"
            echo "  • Code Style Guide: Check rustfmt.toml and .clippy.toml"
            ;;
        esac

        echo ""
        echo "⚡ Next Steps:"
        echo "  1. Review the error details and suggested fixes above"
        echo "  2. Try reproducing the issue locally using the provided commands"
        echo "  3. Check the debug artifacts for additional context"
        echo "  4. If the issue persists, create a GitHub issue with the error details"
        echo ""
