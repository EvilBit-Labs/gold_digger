name: "Run Clippy Linting"
description: "Run cargo clippy with specified feature combinations"

inputs:
  features:
    description: "Feature combinations to test (comma-separated)"
    required: false
    default: "native-tls,rustls,none"
  sarif-output:
    description: "Whether to generate SARIF output"
    required: false
    default: "false"
  sarif-prefix:
    description: "Prefix for SARIF output files"
    required: false
    default: "clippy"

runs:
  using: composite
  steps:
    - name: Run Clippy Linting
      shell: bash
      run: |
        set -euo pipefail

        # Check for SARIF tools if sarif-output is enabled
        if [[ "${{ inputs.sarif-output }}" == "true" ]]; then
          missing_tools=()

          if ! command -v clippy-sarif >/dev/null 2>&1; then
            missing_tools+=("clippy-sarif")
          fi

          if ! command -v sarif-fmt >/dev/null 2>&1; then
            missing_tools+=("sarif-fmt")
          fi

          if [[ ${#missing_tools[@]} -gt 0 ]]; then
            echo "‚ùå Error: Required SARIF tools are missing: ${missing_tools[*]}"
            echo "Please ensure clippy-sarif and sarif-fmt are installed and available in PATH"
            exit 1
          fi
        fi

        # Parse features input defensively - handle empty, comma-only, or comma-separated list
        FEATURES=()
        if [[ -n "${{ inputs.features }}" ]]; then
          # Trim the input string
          features_input=$(echo "${{ inputs.features }}" | xargs)
          if [[ -n "$features_input" ]]; then
            # Split by comma and build array with only non-empty trimmed entries
            IFS=',' read -ra raw_features <<< "$features_input"
            for raw_feature in "${raw_features[@]}"; do
              trimmed_feature=$(echo "$raw_feature" | xargs)
              if [[ -n "$trimmed_feature" ]]; then
                FEATURES+=("$trimmed_feature")
              fi
            done
          fi
        fi

        # Lint each feature combination
        for feature in "${FEATURES[@]}"; do
          # Skip empty entries explicitly
          if [[ -z "$feature" ]]; then
            continue
          fi
          case "$feature" in
            "native-tls")
              echo "üîç Running clippy with native-tls (ssl feature)..."
              if [[ "${{ inputs.sarif-output }}" == "true" ]]; then
                cargo clippy --all-targets --no-default-features --features "json csv ssl additional_mysql_types verbose" --message-format=json -- -D warnings \
                  | clippy-sarif \
                  | tee "${{ inputs.sarif-prefix }}-native-tls.sarif" \
                  | sarif-fmt
              else
                # Capture output and exit code
                if ! output=$(cargo clippy --all-targets --no-default-features --features "json csv ssl additional_mysql_types verbose" -- -D warnings 2>&1); then
                  echo "‚ùå Clippy failed with native-tls features:"
                  echo "$output"
                  echo "$output" > /tmp/clippy_error.log
                  exit 1
                fi
              fi
              ;;
            "rustls")
              echo "üîç Running clippy with rustls (ssl-rustls feature)..."
              if [[ "${{ inputs.sarif-output }}" == "true" ]]; then
                cargo clippy --all-targets --no-default-features --features "json csv ssl-rustls additional_mysql_types verbose" --message-format=json -- -D warnings \
                  | clippy-sarif \
                  | tee "${{ inputs.sarif-prefix }}-rustls.sarif" \
                  | sarif-fmt
              else
                # Capture output and exit code
                if ! output=$(cargo clippy --all-targets --no-default-features --features "json csv ssl-rustls additional_mysql_types verbose" -- -D warnings 2>&1); then
                  echo "‚ùå Clippy failed with rustls features:"
                  echo "$output"
                  echo "$output" > /tmp/clippy_error.log
                  exit 1
                fi
              fi
              ;;
            "none")
              echo "üîç Running clippy without TLS features..."
              if [[ "${{ inputs.sarif-output }}" == "true" ]]; then
                cargo clippy --all-targets --no-default-features --features "json csv additional_mysql_types verbose" --message-format=json -- -D warnings \
                  | clippy-sarif \
                  | tee "${{ inputs.sarif-prefix }}-notls.sarif" \
                  | sarif-fmt
              else
                # Capture output and exit code
                if ! output=$(cargo clippy --all-targets --no-default-features --features "json csv additional_mysql_types verbose" -- -D warnings 2>&1); then
                  echo "‚ùå Clippy failed without TLS features:"
                  echo "$output"
                  echo "$output" > /tmp/clippy_error.log
                  exit 1
                fi
              fi
              ;;
            *)
              echo "‚ö†Ô∏è Unknown feature: $feature, skipping..."
              ;;
          esac
        done

        echo "‚úÖ Clippy linting completed successfully"
