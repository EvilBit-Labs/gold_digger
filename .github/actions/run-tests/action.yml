name: "Run Tests"
description: "Run cargo tests with specified feature combinations"

inputs:
  features:
    description: "Feature combinations to test (comma-separated)"
    required: false
    default: "native-tls,rustls,none"
  use-nextest:
    description: "Whether to use nextest for testing"
    required: false
    default: "true"

runs:
  using: composite
  steps:
    - name: Run Tests
      shell: bash
      run: |
        # Parse features input - handle single feature or comma-separated list
        if [[ "${{ inputs.features }}" == *","* ]]; then
          IFS=',' read -ra FEATURES <<< "${{ inputs.features }}"
        else
          FEATURES=("${{ inputs.features }}")
        fi

        # Test each feature combination
        for feature in "${FEATURES[@]}"; do
          feature=$(echo "$feature" | xargs)  # Trim whitespace
          case "$feature" in
            "native-tls")
              echo "🧪 Testing with native-tls (ssl feature)..."
              if [[ "${{ inputs.use-nextest }}" == "true" ]]; then
                cargo nextest run --no-default-features --features "json csv ssl additional_mysql_types verbose" || cargo test --no-default-features --features "json csv ssl additional_mysql_types verbose"
              else
                cargo test --no-default-features --features "json csv ssl additional_mysql_types verbose"
              fi
              ;;
            "rustls")
              echo "🧪 Testing with rustls (ssl-rustls feature)..."
              if [[ "${{ inputs.use-nextest }}" == "true" ]]; then
                cargo nextest run --no-default-features --features "json csv ssl-rustls additional_mysql_types verbose" || cargo test --no-default-features --features "json csv ssl-rustls additional_mysql_types verbose"
              else
                cargo test --no-default-features --features "json csv ssl-rustls additional_mysql_types verbose"
              fi
              ;;
            "none")
              echo "🧪 Testing without TLS features..."
              if [[ "${{ inputs.use-nextest }}" == "true" ]]; then
                cargo nextest run --no-default-features --features "json csv additional_mysql_types verbose" || cargo test --no-default-features --features "json csv additional_mysql_types verbose"
              else
                cargo test --no-default-features --features "json csv additional_mysql_types verbose"
              fi
              ;;
            *)
              echo "⚠️ Unknown feature: $feature, skipping..."
              ;;
          esac
        done

        echo "✅ Tests completed successfully"
