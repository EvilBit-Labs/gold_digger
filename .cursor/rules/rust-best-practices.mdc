---
description:
globs:
alwaysApply: true
---
# Rust Best Practices for gold_digger

## Project Structure

- The main entry point is [`main.rs`](mdc:src/main.rs), which delegates core logic to library code in [`lib.rs`](mdc:src/lib.rs).
- Modules for output formats are organized as separate files: [`csv.rs`](mdc:src/csv.rs), [`json.rs`](mdc:src/json.rs), and [`tab.rs`](mdc:src/tab.rs).
- Shared logic and public APIs are exposed via [`lib.rs`](mdc:src/lib.rs).

## Module Organization

- Output format modules should implement a common trait/interface (e.g., `FormatWriter`) with a `write` function that takes rows and an output writer.
- Concrete module names can vary (e.g., `csv.rs`, `json.rs`, `tab.rs` for CSV, JSON, and TSV formats respectively) as long as they implement the required trait/interface.
- Public functions in modules should be documented with doc comments (`///`).
- Use `pub mod` in [`lib.rs`](mdc:src/lib.rs) to expose modules.
- Maintainers should ensure documentation reflects the actual module layout and public exports in [`lib.rs`](mdc:src/lib.rs).

## Error Handling Patterns

- Use `anyhow::Result<T>` for all fallible functions
- Never use `from_value::<String>()` - always handle `mysql::Value::NULL`
- Implement credential redaction in all log output
- Use `?` operator for error propagation
- Avoid panics in production code; prefer returning errors. Only use `panic!` for unrecoverable, truly exceptional cases

## Code Quality Standards (Zero Tolerance)

### Quality Gates (Required Before Commits)

```bash
cargo fmt --check           # 100-character line limit enforced
cargo clippy -- -D warnings # Zero tolerance for warnings
cargo nextest run           # Parallel test execution (preferred)
cargo audit                 # Security vulnerability scanning (advisory)
```

### Commit Standards

- **Format:** Conventional commits (`feat:`, `fix:`, `docs:`, etc.)
- **Scope:** Use Gold Digger scopes: `(cli)`, `(db)`, `(output)`, `(tls)`, `(config)`
- **Automation:** Release Please handles versioning and changelog
- **CI Parity:** All CI operations executable locally

### Code Quality Requirements

- **Formatting:** 100-character line limit via `rustfmt.toml`
- **Linting:** Zero clippy warnings (`-D warnings`)
- **Error Handling:** Use `anyhow` for applications, `thiserror` for libraries
- **Documentation:** Doc comments required for all public functions
- **Testing:** Target â‰¥80% coverage with `cargo tarpaulin`

### Code Style

- Follow [Rustfmt](mdc:https://github.com/rust-lang/rustfmt) conventions for formatting
- Use `snake_case` for function and variable names, `CamelCase` for types and structs
- Prefer iterators and combinators over manual loops where possible
- Use explicit types for function signatures, especially for public APIs
- Group imports by standard library, external crates, and local modules, separated by newlines

## Features and Conditional Compilation

- Use Cargo features (see `[features]` in [`Cargo.toml`](mdc:Cargo.toml)) to enable/disable output formats and verbose logging.
- Use `#[cfg(feature = "...")]` to conditionally compile code based on enabled features, as in [`main.rs`](mdc:src/main.rs).

## Dependency Management

- Pin dependency versions in [`Cargo.toml`](mdc:Cargo.toml) and use minimal required features for each crate.
- Use optional dependencies and features for extensibility (e.g., SSL, additional MySQL types).

## Testing and Safety

- Add tests in a `tests/` directory or as `#[cfg(test)]` modules within each file.
- Validate all external input (e.g., environment variables) and handle missing/invalid values gracefully.
- Prefer returning early on error conditions.

## Documentation

- Keep [`README.md`](mdc:README.md) up to date with usage, features, and examples.
- Document all public functions and modules with doc comments.

## Miscellaneous

- Use `.gitignore` to exclude build artifacts and sensitive files.
- Use `.editorconfig` for consistent editor settings.
- Follow the guidelines in [`CONTRIBUTING.md`](mdc:CONTRIBUTING.md) for code contributions.
